<!-- comentários html -->

***para deixar semantico o conteúdo, pode ser usado o*** 
     - header (cabeçalho), 
     - section (para ex.: formulario), se dentro de sections se precisar de + secões posso usar divs (genéricos).
     - No caso usamos a div de doares, dentro dela div doador + div tipo de sangue
     - main (conteudo central),
     - footer (rodapé)-->
 Input - entrada de texto (usamos para receber dados em formulário| Output - Saida (tudo que você esta vendo.)-->

--------------------------------------------------------------
/* comentários css */

ALINHAMENTO DE TEXTO:

--> text-align: center

--> a propriedade *display é a maneira de como o css vai mostrar elementos na página.
temos: flex, inline, block, grid. 

* --> grid é a maneira mult-dimensional, vai aparecer as colunas, em linhas, é como 
se eu estivesse fatiando como uma tabela do excel.
***Grid-template-columns: define a qtd de colunas, mas preciso tb informar a largura da coluna, então se quero 4 colunas, ficaria: 20px 20px 20px 20px, ou pra ser mais flexivel e ocupar melhor o espaço faça: 1fr 1fr 1 fr 1fr e posso usar o grid-gap para dar um espaço entre as colunas
***Grid-template-rows: define qtd de linhas
***Grid-template-areas:

* --> flex, diferente do grid, eu devo escolher entre linhas e colunas, que por padrão vai deixar tudo em linha, mas posso 
junto com display: flex usar o
--> flex-direction: column;

----------------------------------------------------------------
ALINHAMENTO DE ITENS

--> align-items: center, movendo o item imaginando um eixo y, mas movendo até ficar alinhado ao eixo x.


----------------------------------------------------------

ESPAÇAMENTOS:

--> margin, zere os espaçamentos de margin do html, deixe na primeira linha da folha css: html, body {margin: 0;}
--> padding: é nosso espaçamento interno.
--> box-sizing: border-box, use para que seja respeitada a largura, pois do contrario, será somada com o padding. 
*{
    box-sizing: border-box;
}


------------------------------------------------------------------

LARGURAS E ALTURAS

--> width/largura: para limitar os elementos na página, pode ser usados com px, %. Então se eu coloco a 90%
ele vai ocupar 90% a partir da minha esquerda, 

mas se a tela for grande vai ficar estranho, então limito mais ainda colocando o: 
--> max-widht: 500px, por exemplo, então vai esticar até chegar 500px. 

para centralizar posso usar:
--> margin-left: auto e margin-right: auto

--> resumindo: margin: 0 auto 70px; (top:0 esq/dir: auto bottom: 70px)

* --> A ALTURA

no body vamos deixar: height: 100vh; (100% do view heigth do body)

-----------------------------------------------------------------------------------------------
--> position: absolute; ele faz com que um item fique numa camada independente, porque, se faço um quadrado 
numa folha de papel, quando mexo esse quadrado toda a folha mexe consequentemente,mas e se eu fizer esse quadrado 
em uma outra folha, posso mexer esse quadrado sem movimentar a folha inferior ou superior, porque meu novo quadrado
está numa posição absoluta (independente). Usamos ele para fazer a gota e por o tipo sanguineo dentro - classe blood com ::before,
porem para limitar essa liberdade usamos o:

--> position: relative; para que essa movimentação se limite a "caixa" classe blood, ou seja, vai ter uma movimentação 
absoluta não mais sobre meu body, mas sim sobre a classe.  e ai posso usar align-items: center; justify-content: center;
para ajudar no alinhamento.


______________________________________________________________________________________________________

Sobre JS com front and.

--> querySelector tem a funcionalidade de pesquisar por seletores css, exemplo: 
document.querySelector('.logo) fazendo assim, ele vai buscar dentro da página alguma classe com o nome logo
e usando um .depois disso, vem muitas possibilidades para você fazer manipulações, exemplo:

--> document.querySelector('.logo).style.display = "none"
isso faria a minha logo sumir.

vamos aproveitar para criar um evento para o botão "quero ajudar" usando o:
--> addEventListener("click") ele vai ficar escutando e quando ouvir um clique no botão vai fazer algo, veja a 
função completa em scripts.js

--> classList.toogle('hide') o toogle tem a função de adicionar ou remover a classe nomeada de 'hide', mas vou precisar 
mencionar na folha css o quero que aconteça com essa classe e incluir o 'hide' na classe existe no html.

-->  opacity: 0; no css vai fazer as cores sumirem qdo clicarmos no botao, mas os itens ainda "existiram"
-->  visibility: hidden; vai fazer os itens existentes fiquem escondidos, mas ainda provavelmente ainda estará
ocupando a altura e margin... então vamos deixar o heigth: 0; e margin-top: 0; 

--> transition: all 300ms; vai fazer uma transição de 300 milessegundos para suavizar a ida e volta do formulario.

----------------------------------------------------------------------------------------

construindo o servidor com o express

--> const express = require("express") aqui estou pedindo (require = pedindo) as propriedades do express para por na constante express
--> const server = express() aqui estou fazendo a minha outra constante server receber as funçoes do express, 
agora se eu escrever server. vai vir várias propriedades e funcionalidades...então:
--> server.listen(3000) com este listen estou criando meu servidor, que espera que eu informe uma porta, na qual vamos por 3000.
minha página estava funcionando com o live server que informava 127.0.0.1:5500, essa era meu servidor local.
--> se no terminal eu der um start no meu servidor: node server.js e abrir na web 127.0.0.1:5500 não abre mais,
e se tentar 127.0.0.1:3000 o resultado será Cannot GET / isso significa que ele acha o servidor, mas não acha nenhum arquivo apos a /
--> Ctrl + C você para o servidor e node server.js você inicia de novo, a cada inclusão de info em seu servidor você faz essa reiniciação.
--> server.get("/", function(req, res) { return res.send("oi") } essa função é para por algo apos a / a agora nossa página vai dar outro resultado,
--> importante: server.listen(3000) sempre deve estar na ultima linha de código. 
--> nodemon vai nos ajudar a não ter que ficar reiniciando nossa aplicação manualmente, ele simplesmente vai ficar monitorando suas inclusões e
a cada alteração na sua aplicação, o nodemon fará a reinicialização do servidor para você ao dar um start, ver no README como fazer isso.

----------------------------------------------------------------------------------------
-- configurando o servidor para receber o html e arquivos estáticos --

--> const nunjucks = require("nunjucks") configuração para usar o nunjucks no arquivo server.js
se eu escrever nunjucks. vai vir várias opções que vem dele, entao:
--> nunjucks.configure("./", {express: server} ) fazendo isso estou dizendo que meu index esta na raiz e ele vai esperar um objeto, no qual é express: server, ou seja, aplique no meu express, o server 
--> server.get("/", function(req, res){return res.render("index.html")}) estou alterando meu return para fazer funcionar/renderizar o meu html 
--> npm start e veja como está sua página na web
--> server.use(express.static('public')) essa é a configuração para apresentar arquivos extras - estáticos (css, imagens, js do front) que estarão na pasta public

-------------------------------------------------------------------------------------------
 
-- Servidor versus lista de doadores --

--> const donors será meu array de doadores, e que também será um objeto
--> server.get("/", function(req, res){return res.render("index.html", { donors})}) recebe agora o meu objeto donors
--> {% for donor in donors%} para abrir e {%endfor%} para fechar, usando essa estrutura no html porque não sabemos quantos doadores vamos ter.
--> nunjucks.configure("./", {express: server, noCache: true}) Se eu não por o noCache: true meu Array não vai conseguir atualizar na tela os novos nomes.
o Cache serve para não ficar repetindo consultas ou dados, coisas que ele acha que vai ficar demorando muito nas buscas, então ele guarda em algum lugar, mas agora 
colocamos noCache para pegar da nossa fonte "html" e não mais da fonte "dele".

---------------------------------------------------------------------------------------------------------

-- Usando o Formulario para captar dados e adicionar em nosso objeto donors --

--> o server.get esta nos servindo fazendo mostrar na tela os dados, mas agora queremos receber dados, então
--> server.post("/", function(req, res){return req. }) metodo post para receber, mas precisamos dizer isso também para o html
--> <form action="/" method="POST"> para ele entender que é para guardar dados, cada vez que eu clicar no botão, o formulário fará o post, procurando primeiro se 
tenho ele no servidor, no caso temos.
--> lembrando que o "res" dá a resposta e o "req" pega os dados
--> const name = req.body.name , esta é um dos input do form. que estará dentro do server.post...
--> donors.push({name: name,blood: blood,}) return res.redirect("/") será para que de fato os dados sejam adicionados na nosso lista de doadores.
--> server.user(express.urlencoded ({extended: true})) isso é para habilitar o body no servidor quando usamos o formulário e 
estamos solicitando ao urlencoded que extenda suas funções para nós.
--> porém cada dados inserido, após reiniciar o servidor, perco os dados, então por isso vou fazer meu banco de dados.

---------------------------------------------------------------------------------------------------------
